type Client {
  id: ID
  name: String
  surname: String
  company: String
  years: Int
  emails: [Email]
  type: TypeClient
  orders: [Order]
}
type Email {
  email: String
}

type Order {
  id: ID
  order: [String],
  total: Int,
  date: String,
  client: String,
  state: String
}

type Product {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

enum TypeClient {
  BASIC
  PREMIUM
}

type Query {
  getClients(limit: Int, offset: Int): [Client]
  getClient(id: ID): Client 
  totalClients : String
  getProducts(limit: Int, offset: Int): [Product]
  getProduct(id: ID): Product
  totalProducts : String

}
""" Campos para los cliente nuevos"""
input ClientInput {
  id: ID
  name: String
  surname: String
  company: String
  years: Int
  emails: [EmailInput]
  type: TypeClient
  orders: [OrderInput]
}
""" Campos para los pedidos nuevos"""
input OrderInput {
  id: ID
  order: [String],
  total: Int,
  date: String,
  client: String,
  state: String
}
input EmailInput {
  email: String
}
""" Campos para los nuevos productos"""
input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

type Mutation {
  setClient(input: ClientInput): Client
  uploadClient(input: ClientInput): Client
  deleteClient(id: ID!): String
  #Products
  setProduct(input: ProductInput): Product
  uploadProduct(input: ProductInput): Product
  deleteProduct(id: ID!): String
  #Orders
  setOrders(input: OrderInput): Order

}
