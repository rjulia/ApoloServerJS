type Client {
  id: ID
  name: String
  surname: String
  namecomplete: String
  company: String
  years: Int
  emails: [Email]
  type: TypeClient
  seller: ID
}
type Email {
  email: String
}

type Order {
  id: ID
  order: [OderProduct],
  total: Float,
  date: String,
  client: ID,
  state: StateOrder
}

type OderProduct {
  id: ID
  quantity: Int
}

type Product {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

type TotalClient {
  total: Float
  client: [Client]
}

type Token {
  token: String
}
# Si cuando creas usuario, que en este caso solo es usario y contrasena, aqui habroa que completar
type User {
  id: ID
  user: String
  name: String
  rol: Rol
}

enum TypeClient {
  BASIC
  PREMIUM
}
enum StateOrder {
  PENDING
  COMPLETE
  CANCELLED
}

enum Rol {
  ADMIN
  SELLER
}

type Query {
  #Clients
  getClients(limit: Int, offset: Int): [Client]
  getClient(id: ID): Client 
  totalClients : String
  #Products
  getProducts(limit: Int, offset: Int, hasStock: Boolean): [Product]
  getProduct(id: ID): Product
  totalProducts : String
  #Orders
  getOrders(client: String): [Order]
  #graficas
  topClients : [TotalClient]

  #token get users
  getUser: User

}
""" Campos para los cliente nuevos"""
input ClientInput {
  id: ID
  name: String
  surname: String
  namecomplete: String
  company: String
  years: Int
  emails: [EmailInput]
  type: TypeClient
  seller: ID
}

input EmailInput {
  email: String
}

""" Campos para los pedidos nuevos"""
input OrderInput {
  id: ID
  order: [OderProductInput],
  total: Float,
  date: String,
  client: ID,
  state: StateOrder
}

input OderProductInput {
  id: ID
  quantity: Int
}

""" Campos para los nuevos productos"""
input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

type Mutation {
  #Clients
  setClient(input: ClientInput): Client
  uploadClient(input: ClientInput): Client
  deleteClient(id: ID!): String

  #Products
  setProduct(input: ProductInput): Product
  uploadProduct(input: ProductInput): Product
  deleteProduct(id: ID!): String

  #Orders
  setOrders(input: OrderInput): Order
  updateOrders(input: OrderInput): Order

  #users
  createUser(user: String!, name: String!, rol: String!, password: String!): String
  authUser(user: String!, password: String!): Token


}
